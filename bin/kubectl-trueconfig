#!/bin/sh
# Kubectl plugin for simplified cluster config management

# If KUBECONFIG is unset use default
if [ -z "$KUBECONFIG" ]; then 
    KUBECONFIG=~/.kube/config
fi

# Help function
show_help() {
  echo "Usage: kubectl trueconfig <command> <arg>"
  echo "Commands:"
  echo "  delete-all <name>              Delete all entries (cluster/user/context) with the given name"
  echo "  merge <config>                 Merge the specified kubeconfig file into the current config"
  # echo "  rename-all <name> <new-name>   Rename all entries (cluster/user/context) with the given name"
  # echo "  rename-cluster <name> <new-name> - Rename the cluster with the given name"
  # echo "  rename-user <name> <new-name>    - Rename the user with the given name"
}

missing_arg() {
    echo "error: missing arg $1"
    show_help
}

# Ensure necessary arguments
if [ -z "$1" ] || [ -z "$2" ]; then
  show_help
  exit 1
fi

command="$1"
arg="$2"

if [ "$command" = "merge" ]; then
  # Make a copy of your existing config
  if [ -f "$KUBECONFIG" ]; then
    cp "$KUBECONFIG" ~/.kube/config.bak
  else
    echo "error: The current kubeconfig file ($KUBECONFIG) does not exist or is not accessible."
    exit 1
  fi

  # Merge the two config files together into a new config file
  echo "Merging kubeconfig: $arg"
  KUBECONFIG=~/.kube/config:"$arg" kubectl config view --flatten >~/.kube/tmpconfig

  # Replace your old config with the new merged config
  if [ -f ~/.kube/tmpconfig ]; then
    mv ~/.kube/tmpconfig ~/.kube/config
    echo "Merged kubeconfig saved to: ~/.kube/config"
  else
    echo "error: Failed to create the merged kubeconfig file."
    exit 1
  fi

  # (optional) Delete the backup
  # rm ~/.kube/config.bak
  exit 0
fi

if [ "$command" = "delete-all" ]; then
  # Delete all entries with the given name
  echo "Deleting all entries with name: $arg"
  kubectl config delete-context "$arg"
  kubectl config delete-user "$arg"
  kubectl config delete-cluster "$arg"
  exit 0
fi

# if [ "$command" = "rename-all" ]; then
#   if [ -z "$3" ]; then
#     missing_arg "<new-name>"
#     exit 1
#   fi
#   echo "Renaming all entries: $arg to $3"
#   # if GNU sed isn't available use BSD version (MacOS)
#   if sed --version >/dev/null 2>&1; then
#       sed -i "s/name: $arg/name: $3/g" "$KUBECONFIG"
#       sed -i "s/context: $arg/context: $3/g" "$KUBECONFIG"
#       sed -i "s/current-context: $arg/current-context: $3/g" "$KUBECONFIG"
#       sed -i "/^clusters:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#       sed -i "/^users:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   else
#       sed -i.bak "s/name: $arg/name: $3/g" "$KUBECONFIG"
#       sed -i.bak "s/context: $arg/context: $3/g" "$KUBECONFIG"
#       sed -i.bak "s/current-context: $arg/current-context: $3/g" "$KUBECONFIG"
#       sed -i.bak "/^clusters:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#       sed -i.bak "/^users:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   fi
#   exit 0
# fi

# if [ "$command" = "rename-cluster" ]; then
#   if [ -z "$3" ]; then
#     missing_arg "<new-name>"
#     exit 1
#   fi
# 
#   # Rename the cluster with the given name
#   echo "Renaming cluster: $arg to $3"
#   cp "$KUBECONFIG" ~/.kube/config.bak
#   # if GNU sed isn't available use BSD version (MacOS)
#   if sed --version >/dev/null 2>&1; then
#       sed -i "/^clusters:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   else 
#       sed -i.bak "/^clusters:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   fi
#   exit 0
# fi
# 
# if [ "$command" = "rename-user" ]; then
#   if [ -z "$3" ]; then
#     missing_arg "<new-name>"
#     exit 1
#   fi
# 
#   # Rename the user with the given name
#   echo "Renaming user: $arg to $3"
#   cp "$KUBECONFIG" ~/.kube/config.bak
#   # if GNU sed isn't available use BSD version (MacOS)
#   if sed --version >/dev/null 2>&1; then
#       sed -i "/^users:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   else 
#       sed -i.bak "/^users:/,/^$/ s/^\(\s\+-\s\+name:\s\)$arg$/\1$3/" "$KUBECONFIG"
#   fi
#   exit 0
# fi

echo "error: Unknown command. Please refer to the following usage information:"
show_help
